<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sandbox.Common</name>
    </assembly>
    <members>
        <member name="T:Sandbox.ModAPI.IMyGridProgram">
            <summary>
            The interface for the grid program provides extra access for the game and for mods. See <see cref="T:Sandbox.ModAPI.Ingame.MyGridProgram"/> for the class the scripts
            actually derive from.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridProgram.Main(System.String)">
            <summary>
            Invokes this grid program.
            </summary>
            <param name="argument"></param>
        </member>
        <member name="M:Sandbox.ModAPI.IMyGridProgram.Save">
            <summary>
            If this grid program has state saving capability, calling this method
            will invoke it.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.GridTerminalSystem">
            <summary>
            Gets or sets the GridTerminalSystem available for the grid programs.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.Me">
            <summary>
            Gets or sets the programmable block which is currently running this grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.ElapsedTime">
            <summary>
            Gets or sets the amount of time elapsed since the last time this grid program was run.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.Storage">
            <summary>
            Gets or sets the storage string for this grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.Runtime">
            <summary>
            Gets or sets the object used to provide runtime information for the running grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.Echo">
            <summary>
            Gets or sets the action which prints out text onto the currently running programmable block's detail info area.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.HasMainMethod">
            <summary>
            Determines whether this grid program has a valid Main method.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyGridProgram.HasSaveMethod">
            <summary>
            Determines whether this grid program has a valid Save method.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyTerminalBlock.RefreshCustomInfo">
            <summary>
            Raises AppendingCustomInfo so every subscriber can append custom info.
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyTerminalBlock.AppendingCustomInfo">
            <summary>
            Event to append custom info.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyLaserAntenna">
            <summary>
            ModAPI laserantenna block interface
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyLaserAntenna">
            <summary>
            Laser antenna block interface
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLaserAntenna.SetTargetCoords(System.String)">
            <summary>
            Set coordinates of target
            </summary>
            <param name="coords">GPS coordinates string</param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLaserAntenna.Connect">
            <summary>
            Connect to target defined by SetTargetCoords
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLaserAntenna.TargetCoords">
            <summary>
            get target coordinates
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLaserAntenna.IsPermanent">
            <summary>
            Connection is permanent
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLaserAntenna.IsOutsideLimits">
            <summary>
            Target is outside movement limits of antenna
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyLaserAntenna.RequireLoS">
            <summary>
            Flag if antenna requires LoS - for modded antenas
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyDoor.Open">
            <summary>
            Indicates whether door is opened or closed. True when door is opened.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyDoor.OpenRatio">
            <summary>
            Door state, zero is fully closed. One is fully opened.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyMotorBase.Attach">
            <summary>
            Attempts to attach to a nearby rotor/wheel
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyMotorBase.Detach">
            <summary>
            Detaches the rotor/wheel from the stator/suspension
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorBase.IsAttached">
            <summary>
            Gets if the piston top is attached to something
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorBase.PendingAttachment">
            <summary>
            Gets if the motor stator is looking for a rotor
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyMotorBase.Attach(Sandbox.ModAPI.IMyMotorRotor)">
            <summary>
            Attaches a specified nearby rotor/wheel to the stator/suspension block
            </summary>
            <param name="rotor">Entity to attach</param>
            <remarks>The rotor to attach must already be in position before calling this method.</remarks>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorBase.RotorGrid">
            <summary>
            Gets the grid attached to the rotor part
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorBase.Rotor">
            <summary>
            Gets the attached rotor part entity
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Sandbox.ModAPI.IMyMotorBase.AttachedEntityChanged" -->
        <member name="P:Sandbox.ModAPI.IMyMotorBase.DummyPosition">
            <summary>
            Gets the dummy position, to aid in attachment
            </summary>
            <remarks>Gets the location where the top rotor piece will attach.</remarks>
        </member>
        <member name="T:Sandbox.ModAPI.IMyOxygenGenerator">
            <summary>
            Oxygen generator interface
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyOxygenGenerator">
            <summary>
            Oxygen generator interface
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyOxygenGenerator.AutoRefill">
            <summary>
            Autorefill enabled
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyOxygenGenerator.ProductionCapacityMultiplier">
            <summary>
            Increase/decrese O2 produced
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyOxygenGenerator.PowerConsumptionMultiplier">
            <summary>
            Increase/decrese power consumption
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyPistonBase.Attach">
            <summary>
            Attaches a nearby top part to the piston block
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyPistonBase.Detach">
            <summary>
            Detaches the top from the piston
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.Velocity">
            <summary>
            Param - limit is top
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.CurrentPosition">
            <summary>
            Gets the current position of the piston head relative to the base.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.Status">
            <summary>
            Gets the current status.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.IsAttached">
            <summary>
            Gets if the piston base is attached to the top piece
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.IsLocked">
            <summary>
            Gets if the piston is safety locked (welded)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyPistonBase.PendingAttachment">
            <summary>
            Gets if the piston is looking for a top part
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.IMyPistonBase.Attach(Sandbox.ModAPI.IMyPistonTop)">
            <summary>
            Attaches a specified nearby top part to the piston block
            </summary>
            <param name="top">Entity to attach</param>
            <remarks>The top to attach must already be in position before calling this method.</remarks>
        </member>
        <member name="P:Sandbox.ModAPI.IMyPistonBase.TopGrid">
            <summary>
            Gets the grid attached to the piston top part
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyPistonBase.Top">
            <summary>
            Gets the attached piston top part entity
            </summary>
        </member>
        <member name="E:Sandbox.ModAPI.IMyPistonBase.AttachedEntityChanged">
            <summary>
            Notifies when the top grid is attached or detached
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyPistonTop.Piston">
            <summary>
            Gets the attached piston block
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyReactor.CurrentOutput">
            <summary>
            Current output of reactor in Megawatts
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyReactor.MaxOutput">
            <summary>
            Maximum output of reactor in Megawatts
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorRotor.IsAttached">
            <summary>
            Gets whether the rotor is attached to a stator/suspension block
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.IMyMotorRotor.Stator">
            <summary>
            Gets the attached stator/suspension block
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMySensorBlock.MaxRange">
            <summary>
            Param - active
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyShipWelder">
            <summary>
            Ship welder interface
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyShipWelder">
            <summary>
            Ship welder interface
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipWelder.HelpOthers">
            <summary>
            True if welder is set to helper mode
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.IMyUpgradableBlock">
            <summary>
            interface to retrieve upgrade effects from block <see cref="T:Sandbox.ModAPI.Ingame.IMyUpgradableBlock"/>
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyUpgradableBlock">
            <summary>
            interface to retrieve upgrade effects on block
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyUpgradableBlock.GetUpgrades(System.Collections.Generic.Dictionary{System.String,System.Single}@)">
            <summary>
            get list of upgrades (r/o);
            string - upgrade type, float - effect value as float (1 = 100%)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyUpgradableBlock.UpgradeCount">
            <summary>
            number of upgrades applied
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo">
            <summary>
            Provides runtime info for a running grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.TimeSinceLastRun">
            <summary>
            Gets the time elapsed since the last time the Main method of this program was run. This property returns no
            valid data neither in the constructor nor the Save method.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.LastRunTimeMs">
            <summary>
            Gets the number of milliseconds it took to execute the Main method the last time it was run. This property returns no valid
            data neither in the constructor nor the Save method.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.MaxInstructionCount">
            <summary>
            Gets the maximum number of significant instructions that can be executing during a single run, including
            any other programmable blocks invoked immediately.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.CurrentInstructionCount">
            <summary>
            Gets the current number of significant instructions executed.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.MaxMethodCallCount">
            <summary>
            Gets the maximum number of method calls that can be executed during a single run, including
            any other programmable blocks invoked immediately.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyGridProgramRuntimeInfo.CurrentMethodCallCount">
            <summary>
            Gets the current number of method calls.
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.IMyRadioAntenna">
            <summary>
            Antenna block interface
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRadioAntenna.Radius">
            <summary>
            Broadcasting/Receiving range (read-only)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRadioAntenna.ShowShipName">
            <summary>
            Show shipname on hud (read-only)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyRadioAntenna.IsBroadcasting">
            <summary>
            Returns true if antena is broadcasting (read-only)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyShipController.IsUnderControl">
            <summary>
            Indicates whether a block is locally or remotely controlled.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TrackTarget(VRage.ModAPI.IMyEntity)">
            <summary>
            Tracks entity with enabled position prediction
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.TrackTarget(VRageMath.Vector3D,VRageMath.Vector3)">
            <summary>
            Tracks given target with enabled position prediction
            </summary>
            <param name="pos"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SetTarget(VRage.ModAPI.IMyEntity)">
            <summary>
            Tracks target without position prediction
            </summary>
            <param name="Entity"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SetTarget(VRageMath.Vector3D)">
            <summary>
            Targets given position
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SyncElevation">
            <summary>
            method used to sync elevation of turret , you need to call it to sync elevation for other clients/server
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SyncAzimuth">
            <summary>
            method used to sync azimuth, you need to call it to sync azimuth for other clients/server
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.SyncEnableIdleRotation">
            <summary>
            method used to sync idle rotation and elevation, you need to call it to sync rotation and elevation for other clients/server
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.ResetTargetingToDefault">
            <summary>
            resert targeting to default values
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.IsUnderControl">
            <summary>
            Indicates whether a block is locally or remotely controlled.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.Elevation">
            <summary>
            Sets/gets elevation of turret, this method is not synced, you need to sync elevation manually
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.Azimuth">
            <summary>
            Sets/gets azimuth of turret, this method is not synced, you need to sync azimuth manually
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.EnableIdleRotation">
            <summary>
            enable/disable idle rotation for turret, this method is not synced, you need to sync manually
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyLargeTurretBase.AIEnabled">
            <summary>
            Checks is AI is enabled for turret
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.SteerAngle">
            <summary>
            Wheel's current steering angle
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.MaxSteerAngle">
            <summary>
            Max steering angle in radians.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.SteerSpeed">
            <summary>
            Speed at which wheel steers.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.SteerReturnSpeed">
            <summary>
            Speed at which wheel returns from steering.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.SuspensionTravel">
            <summary>
            Suspension travel, value from 0 to 1.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyMotorSuspension.Brake">
            <summary>
            Set/get brake applied to the wheel.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyProgrammableBlock.TryRun(System.String)">
            <summary>
            Attempts to run this programmable block using the given argument. An already running
            programmable block cannot be run again.
            This is equivalent to running <c>block.ApplyAction("Run", argumentsList);</c>
            </summary>
            <param name="argument"></param>
            <returns><c>true</c> if the action was applied, <c>false</c> otherwise</returns>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProgrammableBlock.IsRunning">
            <summary>
            This programmable block is currently running its program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyProgrammableBlock.TerminalRunArgument">
            <summary>
            Contains the value of the default terminal argument.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.IMyTextPanel.GetSelectedImages(System.Collections.Generic.List{System.String})">
            <summary>
            Outputs the selected image ids to the specified list.
            
            NOTE: List is not cleared internally.
            </summary>
            <param name="output"></param>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextPanel.CurrentlyShownImage">
            <summary>
            The image that is currently shown on the screen.
            
            Returns NULL if there are no images selected OR the screen is in text mode.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextPanel.ShowOnScreen">
            <summary>
            Indicates what should be shown on the screen, none being an image.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.IMyTextPanel.ShowText">
            <summary>
            Returns true if the ShowOnScreen flag is set to either PUBLIC or PRIVATE
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.PistonStatus">
            <summary>
            Describes the current status of the piston.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Stopped">
            <summary>
            The piston velocity is 0 (stationary).
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Extending">
            <summary>
            The piston is being extended (moving).
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Extended">
            <summary>
            The piston is in its extended position (stationary).
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Retracting">
            <summary>
            The piston is being retracted (moving).
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.PistonStatus.Retracted">
            <summary>
            The piston is in its retracted position (stationary).
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Ingame.MyGridProgram">
            <summary>
                All programmable block scripts derive from this class, meaning that all properties in this
                class are directly available for use in your scripts.
                If you use Visual Studio or other external editors to write your scripts, you can derive
                directly from this class and have a compatible script template.
            </summary>
            <example>
                <code>
            public void Main()
            {
                // Print out the time elapsed since the currently running programmable block was run
                // the last time.
                Echo(Me.CustomName + " was last run " + Runtime.TimeSinceLastRun.TotalSeconds + " seconds ago.");
            }
            </code>
            </example>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.GridTerminalSystem">
            <summary>
                Provides access to the grid terminal system as viewed from this programmable block.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.Me">
            <summary>
                Gets a reference to the currently running programmable block.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.ElapsedTime">
            <summary>
                Gets the amount of in-game time elapsed from the previous run.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.Runtime">
            <summary>
            Gets runtime information for the running grid program.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.Storage">
            <summary>
                Allows you to store data between game sessions.
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Ingame.MyGridProgram.Echo">
            <summary>
                Prints out text onto the currently running programmable block's detail info area.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.Ingame.TerminalActionParameter.Empty">
            <summary>
            Gets an empty parameter.
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalActionParameter.Deserialize(System.String,System.TypeCode)">
            <summary>
            Creates a <see cref="T:Sandbox.ModAPI.Ingame.TerminalActionParameter"/> from a serialized value in a string and a type code.
            </summary>
            <param name="serializedValue"></param>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Ingame.TerminalActionParameter.Get(System.Object)">
            <summary>
            Creates a <see cref="T:Sandbox.ModAPI.Ingame.TerminalActionParameter"/> from the given value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.ITerminalProperty">
            <summary>
            Terminal block property definition
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.Id">
            <summary>
            Property Id (value name)
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName">
            <summary>
            Property type (bool - <see cref="T:System.Boolean"/>, float - <see cref="T:System.Single"/>, color - <see cref="T:VRageMath.Color"/>)
            </summary>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1">
            <summary>
            Terminal block property access
            </summary>
            <typeparam name="TValue">Property type (<see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>)</typeparam>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetValue(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Retrieve property value
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.SetValue(VRage.Game.ModAPI.Ingame.IMyCubeBlock,`0)">
            <summary>
            Set property value
            </summary>
            <param name="block">block reference</param>
            <param name="value">value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetDefaultValue(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Default value of property (if value is not set, or value from block definition)
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetMininum(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Minimum value of property (value from block definition) - this function is obsolete, because it contains typo in name, use <see cref="!:GetMinimum(Sandbox.ModAPI.Ingame.IMyCubeBlock)"/>
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetMinimum(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Minimum value of property (value from block definition)
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.ITerminalProperty`1.GetMaximum(VRage.Game.ModAPI.Ingame.IMyCubeBlock)">
            <summary>
            Maximum value of property (value from block definition)
            </summary>
            <param name="block">block reference</param>
            <returns>value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="T:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions">
            <summary>
            Terminal block extension for property access
            </summary>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.As``1(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <typeparam name="TValue">value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.Cast``1(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <typeparam name="TValue">value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.Is``1(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Check property type
            </summary>
            <typeparam name="TValue">value of type <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>true if type matches</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.AsFloat(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type (float)</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.AsColor(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type (Color)</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.AsBool(Sandbox.ModAPI.Interfaces.ITerminalProperty)">
            <summary>
            Property type cast
            </summary>
            <param name="property"><see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> reference</param>
            <returns>reference to <see cref="T:Sandbox.ModAPI.Interfaces.ITerminalProperty`1"/> value of specified type (bool)</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetValueFloat(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns value of specified property
            </summary>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as float</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.SetValueFloat(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String,System.Single)">
            <summary>
            Set float value of property
            </summary>
            <typeparam name="T"><see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetValueBool(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns value of specified property
            </summary>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as bool</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.SetValueBool(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String,System.Boolean)">
            <summary>
            Set bool value of property
            </summary>
            <typeparam name="T"><see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetValueColor(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns value of specified property
            </summary>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as Color</returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.SetValueColor(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String,VRageMath.Color)">
            <summary>
            Set bool value of property
            </summary>
            <typeparam name="T"><see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetValue``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>
            <typeparam name="T">required value type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetDefaultValue``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns default value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>
            <typeparam name="T">required value type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetMininum``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns minimum value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/> - this call is obsolete due typo in name, use <see cref="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetMinimum``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)"/>
            </summary>
            <typeparam name="T">required value type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetMinimum``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns minimum value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>
            <typeparam name="T">required value type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.GetMaximum``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String)">
            <summary>
            Returns maximum value of specified property as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>
            <typeparam name="T">required value type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <returns>property value as <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></returns>
        </member>
        <member name="M:Sandbox.ModAPI.Interfaces.TerminalPropertyExtensions.SetValue``1(Sandbox.ModAPI.Ingame.IMyTerminalBlock,System.String,``0)">
            <summary>
            Set value of property with type of <see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/>
            </summary>
            <typeparam name="T"><see cref="P:Sandbox.ModAPI.Interfaces.ITerminalProperty.TypeName"/></typeparam>
            <param name="block">block reference</param>
            <param name="propertyId">property id (name)</param>
            <param name="value">value to set</param>
        </member>
        <member name="T:Sandbox.ModAPI.MyAPIGateway">
            <summary>
            This is entry point for entire scripting possibilities in game
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.GuiControlCreated">
            <summary>
            Event triggered on gui control created.
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Players">
            <summary>
            IMyPlayerCollection contains all players that are in world 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.CubeBuilder">
            <summary>
            IMyCubeBuilder represents building hand 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.TerminalActionsHelper">
            <summary>
            IMyTerminalActionsHelper is helper for terminal actions and allows to access terminal 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Utilities">
            <summary>
            IMyUtilities is helper for loading/saving files , showing messages to players
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Multiplayer">
            <summary>
            IMyMultiplayer  contains multiplayer related things
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Parallel">
            <summary>
            IMyParallelTask allows to run tasks on baground threads 
            </summary>
        </member>
        <member name="F:Sandbox.ModAPI.MyAPIGateway.Input">
            <summary>
            IMyInput allows accessing direct input device states
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyAPIGateway.Session">
            <summary>
            IMySession represents session object e.g. current world and its settings
            </summary>
        </member>
        <member name="P:Sandbox.ModAPI.MyAPIGateway.Entities">
            <summary>
            IMyEntities represents all objects that currently in world 
            </summary>
        </member>
    </members>
</doc>
